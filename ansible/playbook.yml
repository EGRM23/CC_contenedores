---
- name: 🚀 Desplegar Infraestructura AWS y Aplicación K8s
  hosts: localhost
  connection: local
  gather_facts: false
  
  tasks:
    - name: 📦 Crear VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ project_name }}-vpc"
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ aws_region }}"
        tags:
          Project: "{{ project_name }}"
      register: vpc

    - name: 🌐 Crear Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
      register: igw

    - name: 🔗 Crear Subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        region: "{{ aws_region }}"
        az: "{{ aws_region }}a"
        tags:
          Name: "{{ project_name }}-subnet"
      register: subnet

    - name: 🛡️ Crear Security Group (CORREGIDO)
      amazon.aws.ec2_security_group:
        name: "{{ project_name }}-sg"
        description: "Security group para Kubernetes y aplicación"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 3000
            to_port: 3000
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 6443  # K3s API (CORREGIDO)
            to_port: 6443
            cidr_ip: 0.0.0.0/0
        tags:
          Project: "{{ project_name }}"
      register: security_group

    - name: 🚀 Crear Launch Template
      amazon.aws.ec2_launch_template:
        name: "{{ project_name }}-template"
        region: "{{ aws_region }}"
        image_id: "ami-0c02fb55956c7d316"  # Amazon Linux 2
        instance_type: "{{ instance_type }}"
        key_name: "{{ key_name }}"
        security_group_ids:
          - "{{ security_group.group_id }}"
        user_data: "{{ lookup('template', 'templates/user-data.sh.j2') }}"
        block_device_mappings:
          - device_name: /dev/xvda
            ebs:
              volume_size: 20
              volume_type: gp3
        tags:
          Project: "{{ project_name }}"

    - name: 📈 Crear Auto Scaling Group
      amazon.aws.ec2_asg:
        name: "{{ project_name }}-asg"
        availability_zones:
          - "{{ aws_region }}a"
        launch_template:
          launch_template_name: "{{ project_name }}-template"
          version: "$Latest"
        min_size: "{{ min_size }}"
        max_size: "{{ max_size }}"
        desired_capacity: "{{ desired_capacity }}"
        vpc_zone_identifier:
          - "{{ subnet.subnet.id }}"
        tags:
          - key: Name
            value: "{{ project_name }}-instance"
            propagate_at_launch: true
        wait_for_instances: false  # 👈 Cambiado a false para evitar timeout

    - name: ⏳ Esperar a que las instancias se inicialicen
      pause:
        minutes: 3
      when: min_size > 0

    - name: 🔍 Obtener IPs de las instancias (CON MÓDULO CORRECTO)
      amazon.aws.ec2_instance_info:  # 👈 CAMBIADO a amazon.aws
        region: "{{ aws_region }}"
        filters:
          "tag:Project": "{{ project_name }}"
      register: ec2_instances

    - name: 🎉 Mostrar información de acceso
      debug:
        msg:
          - "✅ Infraestructura desplegada exitosamente!"
          - "📡 Instancias EC2 creadas:"
          - "{% for instance in ec2_instances.instances %}
             🌐 Instancia {{ loop.index }} - IP Pública: {{ instance.public_ip_address }}
             {% endfor %}"
          - "🔗 Para acceder a tu aplicación:"
          - "   http://{{ ec2_instances.instances[0].public_ip_address }} (Frontend)"
          - "   http://{{ ec2_instances.instances[0].public_ip_address }}/api (Backend)"
          - "💡 O configura en /etc/hosts:"
          - "   {{ ec2_instances.instances[0].public_ip_address }} {{ domain }}"