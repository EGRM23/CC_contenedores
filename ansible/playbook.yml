---
- name: 🚀 Desplegar Infraestructura AWS y Aplicación K8s
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    ansible_python_interpreter: /home/egrm23/miniconda3/bin/python3.13

  tasks:
    - name: 🧹 Limpiar recursos existentes
      block:
        - name: Eliminar Auto Scaling Group
          amazon.aws.ec2_asg:
            name: "{{ project_name }}-asg"
            region: "{{ aws_region }}"
            state: absent
          ignore_errors: yes

        - name: Eliminar Launch Template
          amazon.aws.ec2_launch_template:
            name: "{{ project_name }}-template"
            region: "{{ aws_region }}"
            state: absent
          ignore_errors: yes

      #   - name: Eliminar Auto Scaling Group existente
      #     amazon.aws.ec2_asg:
      #       name: "{{ project_name }}-asg"
      #       region: "{{ aws_region }}"
      #       state: absent
      #     ignore_errors: yes
      #     register: asg_cleanup

      #   - name: Eliminar Launch Template existente
      #     amazon.aws.ec2_launch_template:
      #       name: "{{ project_name }}-template"
      #       region: "{{ aws_region }}"
      #       state: absent
      #     ignore_errors: yes
      #     register: lt_cleanup

      #   - name: Buscar Security Groups existentes
      #     amazon.aws.ec2_security_group_info:
      #       region: "{{ aws_region }}"
      #       filters:
      #         "tag:Project": "{{ project_name }}"
      #     register: existing_sgs

      #   - name: Eliminar Security Groups existentes
      #     amazon.aws.ec2_security_group:
      #       group_id: "{{ item.group_id }}"
      #       region: "{{ aws_region }}"
      #       state: absent
      #     loop: "{{ existing_sgs.security_groups }}"
      #     when: existing_sgs.security_groups | length > 0
      #     ignore_errors: yes
      #     register: sg_cleanup

      #   - name: Buscar VPC existente
      #     amazon.aws.ec2_vpc_net_info:
      #       region: "{{ aws_region }}"
      #       filters:
      #         "tag:Project": "{{ project_name }}"
      #     register: existing_vpcs

      #   - name: Eliminar subnets de VPC existente
      #     amazon.aws.ec2_vpc_subnet:
      #       state: absent
      #       vpc_id: "{{ item.vpc_id }}"
      #       region: "{{ aws_region }}"
      #     loop: "{{ existing_vpcs.vpcs | default([]) }}"
      #     when: existing_vpcs.vpcs | length > 0
      #     ignore_errors: yes

      #   - name: Eliminar Internet Gateways de VPC existente
      #     amazon.aws.ec2_vpc_igw_info:
      #       region: "{{ aws_region }}"
      #       filters:
      #         "tag:Project": "{{ project_name }}"
      #     register: existing_igws

      #   - name: Desvincular y eliminar Internet Gateways
      #     amazon.aws.ec2_vpc_igw:
      #       igw_id: "{{ item.internet_gateway_id }}"
      #       state: absent
      #       region: "{{ aws_region }}"
      #     loop: "{{ existing_igws.internet_gateways | default([]) }}"
      #     when: existing_igws.internet_gateways | length > 0
      #     ignore_errors: yes

      #   - name: Eliminar VPC existente
      #     amazon.aws.ec2_vpc_net:
      #       vpc_id: "{{ item.vpc_id }}"
      #       region: "{{ aws_region }}"
      #       state: absent
      #     loop: "{{ existing_vpcs.vpcs | default([]) }}"
      #     when: existing_vpcs.vpcs | length > 0
      #     ignore_errors: yes

      # rescue:
      #   - name: ⚠️  Algunos recursos no pudieron limpiarse, continuando...
      #     debug:
      #       msg: "Algunos recursos existentes no pudieron eliminarse, pero continuamos..."

      always:
        - name: ⏳ Esperar después de la limpieza
          pause:
            seconds: 15
    
    - name: 🏗️ Gestionar VPC existente o crear nueva
      block:
        - name: Buscar VPC existente
          amazon.aws.ec2_vpc_net_info:
            region: "{{ aws_region }}"
            filters:
              "tag:Project": "{{ project_name }}"
          register: vpc_existente

        - name: Crear nueva VPC si no existe
          amazon.aws.ec2_vpc_net:
            name: "{{ project_name }}-vpc"
            cidr_block: "{{ vpc_cidr }}"
            region: "{{ aws_region }}"
            tags:
              Project: "{{ project_name }}"
          register: nueva_vpc
          when: vpc_existente.vpcs | length == 0

        - name: Configurar VPC ID
          set_fact:
            vpc_id: "{{ (vpc_existente.vpcs[0].vpc_id if vpc_existente.vpcs else nueva_vpc.vpc.id) }}"
            vpc_accion: "{{ 'reutilizada' if vpc_existente.vpcs else 'creada' }}"

      rescue:
        - name: 🚨 Crear VPC de emergencia
          amazon.aws.ec2_vpc_net:
            name: "{{ project_name }}-vpc-emergencia"
            cidr_block: "10.99.0.0/16"
            region: "{{ aws_region }}"
            tags:
              Project: "{{ project_name }}"
          register: vpc_emergencia
          
        - name: Configurar VPC de emergencia
          set_fact:
            vpc_id: "{{ vpc_emergencia.vpc.id }}"
            vpc_accion: "emergencia"

    - name: 📝 Estado de VPC
      debug:
        msg: "VPC: {{ vpc_id }} ({{ vpc_accion }})"

    - name: 🌐 Gestionar Internet Gateway
      block:
        - name: Verificar si la VPC ya tiene Internet Gateway
          amazon.aws.ec2_vpc_igw_info:
            region: "{{ aws_region }}"
            filters:
              "attachment.vpc-id": "{{ vpc_id }}"
          register: igw_existente

        - name: Crear Internet Gateway si no existe
          amazon.aws.ec2_vpc_igw:
            vpc_id: "{{ vpc_id }}"
            region: "{{ aws_region }}"
            tags:
              Project: "{{ project_name }}"
          when: igw_existente.internet_gateways | length == 0

      rescue:
        - debug:
            msg: "Internet Gateway podría ya estar configurado"

    - name: 🔗 Gestionar Subnet
      block:
        - name: Buscar Subnets existentes en la VPC
          amazon.aws.ec2_vpc_subnet_info:
            region: "{{ aws_region }}"
            filters:
              vpc-id: "{{ vpc_id }}"
              "tag:Project": "{{ project_name }}"
          register: subnets_existentes

        - name: Crear Subnet si no existe
          amazon.aws.ec2_vpc_subnet:
            vpc_id: "{{ vpc_id }}"
            cidr: "{{ subnet_cidr }}"
            region: "{{ aws_region }}"
            az: "{{ aws_region }}a"
            map_public: true
            tags:
              Name: "{{ project_name }}-subnet"
              Project: "{{ project_name }}"
          register: subnet_info
          when: subnets_existentes.subnets | length == 0

        - name: Usar Subnet existente
          set_fact:
            subnet_id: "{{ subnets_existentes.subnets[0].id }}"
          when: subnets_existentes.subnets | length > 0

        - name: Usar Subnet nueva
          set_fact:
            subnet_id: "{{ subnet_info.subnet.id }}"
          when: subnets_existentes.subnets | length == 0

      rescue:
        - name: 🚨 Crear Subnet de emergencia
          amazon.aws.ec2_vpc_subnet:
            vpc_id: "{{ vpc_id }}"
            cidr: "10.99.1.0/24"
            region: "{{ aws_region }}"
            az: "{{ aws_region }}a"
            map_public: true
            tags:
              Name: "{{ project_name }}-subnet-emergencia"
              Project: "{{ project_name }}"
          register: subnet_emergencia
          
        - name: Configurar Subnet de emergencia
          set_fact:
            subnet_id: "{{ subnet_emergencia.subnet.id }}"
    
    - name: 🔍 DEBUG - Diagnosticar problema Security Group
      block:
        - name: Verificar VPC actual
          debug:
            msg: "VPC ID que usaremos: {{ vpc_id }}"

        - name: Buscar Security Groups por tag Project
          amazon.aws.ec2_security_group_info:
            region: "{{ aws_region }}"
            filters:
              "tag:Project": "{{ project_name }}"
              vpc-id: "{{ vpc_id }}"
          register: sg_existente

        - name: Mostrar estado de Security Group
          debug:
            msg: "Security Group existente: {{ 'SÍ' if sg_existente.security_groups else 'NO' }}"

        - name: Eliminar Security Group existente si existe
          amazon.aws.ec2_security_group:
            group_id: "{{ item.group_id }}"
            region: "{{ aws_region }}"
            state: absent
          loop: "{{ sg_existente.security_groups }}"
          when: sg_existente.security_groups | length > 0
          ignore_errors: yes

      always:
        - pause:
            seconds: 5

    - name: 🛡️ Crear Security Group
      block:
        - name: Intentar crear Security Group (via AWS CLI)
          command: >
            aws ec2 create-security-group
            --group-name "{{ project_name }}-sg"
            --description "Security group para la app"
            --vpc-id "{{ vpc_id }}"
            --region "{{ aws_region }}"
            --tag-specifications "ResourceType=security-group,Tags=[{Key=Project,Value={{ project_name }}}]"
          register: sg_cli

        - name: 📥 Extraer Group ID
          set_fact:
            security_group_id: "{{ (sg_cli.stdout | from_json).GroupId }}"

        - name: 🔒 Agregar regla SSH
          command: >
            aws ec2 authorize-security-group-ingress
            --group-id "{{ security_group_id }}"
            --protocol tcp
            --port 22
            --cidr 0.0.0.0/0
            --region "{{ aws_region }}"

        - name: 🌐 Agregar regla HTTP
          command: >
            aws ec2 authorize-security-group-ingress
            --group-id "{{ security_group_id }}"
            --protocol tcp
            --port 80
            --cidr 0.0.0.0/0
            --region "{{ aws_region }}"

        - name: 📡 Agregar regla Backend
          command: >
            aws ec2 authorize-security-group-ingress
            --group-id "{{ security_group_id }}"
            --protocol tcp
            --port 3000
            --cidr 0.0.0.0/0
            --region "{{ aws_region }}"

        - name: 🔐 Agregar regla HTTPS
          command: >
            aws ec2 authorize-security-group-ingress
            --group-id "{{ security_group_id }}"
            --protocol tcp
            --port 443
            --cidr 0.0.0.0/0
            --region "{{ aws_region }}"

        - name: 📝 Guardar Security Group ID
          set_fact:
            security_group:
              group_id: "{{ security_group_id }}"

    - name: 🚀 Crear Launch Template
      amazon.aws.ec2_launch_template:
        name: "{{ project_name }}-template"
        region: "{{ aws_region }}"
        image_id: "ami-0c02fb55956c7d316"  # Amazon Linux 2
        instance_type: "{{ instance_type }}"
        key_name: "{{ key_name }}"
        security_group_ids:
          - "{{ security_group.group_id }}"
        user_data: "{{ lookup('template', 'templates/user-data.sh.j2') | b64encode }}"
        block_device_mappings:
          - device_name: /dev/xvda
            ebs:
              volume_size: 8
              volume_type: gp2
        tags:
          Project: "{{ project_name }}"

    - name: 📈 Crear Auto Scaling Group
      amazon.aws.ec2_asg:
        name: "{{ project_name }}-asg"
        availability_zones:
          - "{{ aws_region }}a"
        launch_template:
          launch_template_name: "{{ project_name }}-template"
          version: "$Latest"
        min_size: "{{ min_size }}"
        max_size: "{{ max_size }}"
        desired_capacity: "{{ desired_capacity }}"
        vpc_zone_identifier:
          - "{{ subnet_id }}"
        tags:
          - key: Name
            value: "{{ project_name }}-instance"
            propagate_at_launch: true
          - key: Project
            value: "{{ project_name }}"
            propagate_at_launch: true
        wait_for_instances: false

    - name: ⏳ Esperar a que las instancias estén en servicio
      amazon.aws.autoscaling_group:
        name: "{{ project_name }}-asg"
        region: "{{ aws_region }}"
        wait_for_instances: true
        wait_timeout: 600
      register: asg_wait_result
      when: min_size > 0

    - name: 🔄 Esperar adicional para inicialización del sistema
      pause:
        minutes: 2
      when: min_size > 0
      
    - name: 🔍 Obtener información detallada del ASG
      amazon.aws.autoscaling_group_info:
        name: "{{ project_name }}-asg"
        region: "{{ aws_region }}"
      register: asg_info

    - name: 📊 Obtener información de las instancias del ASG
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        filters:
          "tag:aws:autoscaling:groupName": "{{ project_name }}-asg"
      register: asg_instances_info
    
    # - name: 🔍 DEBUG - Ver estructura de asg_instances_info
    #   debug:
    #     var: asg_instances_info

    - name: 🎉 Mostrar información de acceso (VERSIÓN SEGURA)
      debug:
        msg: |
          🎉 ¡INFRAESTRUCTURA DESPLEGADA EXITOSAMENTE!

          ✅ Recursos creados:
          🔗 VPC ID: {{ vpc_id }}
          🔗 Subnet ID: {{ subnet_id }}
          🛡️ Security Group: {{ security_group.group_id }}
          📈 Auto Scaling Group: {{ project_name }}-asg
          🚀 Launch Template: {{ project_name }}-template

          {% if asg_info.results[0].instances | length > 0 %}
          📊 Estado del ASG:
            Deseadas: {{ asg_info.results[0].desired_capacity }}
            Mínimo: {{ asg_info.results[0].min_size }}
            Máximo: {{ asg_info.results[0].max_size }}
            Instancias en servicio: {{ asg_info.results[0].instances | selectattr('lifecycle_state', 'equalto', 'InService') | list | length }}

          📡 IDs de instancias creadas:
            {% for instance in asg_info.results[0].instances %}
            - {{ instance.instance_id }} ({{ instance.lifecycle_state }})
            {% endfor %}

          🔗 Para obtener las IPs y acceder:
            {% for instance in asg_info.results[0].instances %}
            aws ec2 describe-instances --instance-ids {{ instance.instance_id }} --region {{ aws_region }} --query 'Reservations[0].Instances[0].PublicIpAddress'
            {% endfor %}

          💡 Una vez tengas las IPs, accede a:
            Frontend: http://[IP_PUBLICA]
            Backend:  http://[IP_PUBLICA]/api

          {% else %}
          ⚠️  No hay instancias en servicio actualmente.
          
          🔍 Para diagnosticar:
            aws autoscaling describe-scaling-activities --auto-scaling-group-name {{ project_name }}-asg --region {{ aws_region }} --max-items 5
          {% endif %}
